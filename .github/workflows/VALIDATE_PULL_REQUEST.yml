# This is a basic workflow to help you get started with Actions

name: VALIDATE_PULL_REQUEST

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  METADATA_DELTA_VALIDATION:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: jorgesolebur/salesforce-ci:latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      # CHeckout from GIT. We checkout both HEAD and BASE branches to generate DELTA
      # git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
      - name: Checkout from GIT. We checkout both HEAD and BASE branches to generate DELTA
        run: |
          export HOME=/root
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git checkout ${{ github.BASE_REF }}
          git checkout ${{ github.HEAD_REF }}

      # Run SF GIT and creates delta
      - name: Run sf git delta and creates delta
        run: |
          export HOME=/root
          mkdir force-app-delta
          pwsh -c 'sf sgd source delta --to ${{ github.HEAD_REF }} --from $(git merge-base ${{ github.HEAD_REF }} ${{ github.BASE_REF }}) -s force-app --generate-delta --output ./force-app-delta/'
      - name: Show package to deploy
        run: |
          cat force-app-delta/package/package.xml
      - name: Show package to destroy
        run: |
          cat force-app-delta/destructiveChanges/destructiveChanges.xml

      # Replaces placeholders in the metadata with the value from the property file for the right environment and creates folder /deploy with all the components with replaced placeholders. THe folder /force-app contains same as /deploy
      - name: Replaces placeholders in the files with the property file variable values from the right environment
        run: |
          export HOME=/root
          echo "Running on Branch: ${{github.base_ref}}"
          if [ "${{github.base_ref}}" = "develop" ]; then
              echo "Preparing QA Properties"
              ant prepare -Dsf.env=QA
          else
              echo "Unknown Branch, Exiting"
              exit 1 
          fi

      # Runs PMD ruleset. This task will fail if there is any rule that is violated. We need to update ~/.sfdx-scanner/Config.json to make sure PMD scans as well -meta.xml files
      # We have defined custom Apex rules and custom XML Metadata rules that we should add as rules in PMD scanner by running scanner:rule:add
      # Pending command to be used: sed -i -e 's+"!\*\*/\*-meta.xml"+"\*\*/\*-meta.xml"+g' ~/.sfdx-scanner/Config.json
      - name: Apex Code + Metadata Best Practices scanning using SFDX Scanner. This step will FAIL if there is any critical coding standards not met
        if: ${{ true }}
        run: |
          export HOME=/root
          sf scanner rule add --language xml --path "./scripts/pmd/category/xml/xml_custom_rules.xml"
          sf scanner rule add --language apex --path "./scripts/pmd/category/apex/apex_custom_rules.xml"
          echo "List of custom and standard rules used for NCS : "
          sf scanner rule list
          sed -i -e 's+"!\*\*/\*-meta.xml"+"\*\*/\*-meta.xml"+g' ~/.sfdx-scanner/Config.json
          echo "Executing PMD Scan now : "
          pwsh -c 'sf scanner run --target "./force-app-delta/force-app/" --pmdconfig "./scripts/pmd/rulesets/critical_scan.xml" --severity-threshold "1" --engine "pmd" --format "table"'

      - name: Apex Code + Metadata Best Practices scanning using PMD. This step will FAIL if there is any critical coding standards not met
        if: ${{ false }}
        run: |
          export HOME=/root
          rm -f ./pmdfilelist.txt
          touch pmdfilelist.txt
          if [ -d "./force-app-delta/force-app/main/default/classes/" ]; then find ./force-app-delta/force-app/main/default/classes/ -name "*.cls" >> pmdfilelist.txt; fi  
          if [ -d "./force-app-delta/force-app/main/default/triggers/" ]; then find ./force-app-delta/force-app/main/default/triggers/ -name "*.trigger" >> pmdfilelist.txt; fi 
          pmd check --rulesets "./scripts/pmd/rulesets/critical_scan.xml" --file-list "./pmdfilelist.txt" --format textcolor --fail-on-violation --use-version apex-57 --minimum-priority=1

      # Runs Flow Scan. This task will fail if there is any rule that is violated
      # We should accept flow scanner because it is not trusted by default
      - name: SF Flow Scan. This step will fail if there is any rule that is violated
        run: |
          export HOME=/root
          sf flow scan -c .flow-scanner.json -d "./force-app-delta/" --json --failon error

      # Runs ESLint rules. This task will fail if there is any rule that is violated.
      # RUnning with PMD looks like this:
      # We put all files to scan in a txt file find ./force-app/main/default/classes/ -name "*.cls" > pmdfilelist.txt
      # /path-to-pmd-bin/pmd check --rulesets "./scripts/pmd/rulesets/critical_scan.xml" --file-list "./pmdfilelist.txt" --format textcolor --fail-on-violation --use-version apex-57
      - name: LWC Best Practices scanning using ESLint. This step will FAIL if there is any critical coding standards not met
        run: |
          export HOME=/root
          pwsh -c 'npm dedupe'
          echo "Executing ESLint Scan now : " 
          pwsh -c 'sf scanner run  --target "./force-app/**/*.js" --eslintconfig "./scripts/eslint/.eslintrc.json" --severity-threshold "1" --engine "eslint-lwc"'

      #Authentication to Target org
      - name: Write the token into a file and authenticate to Target Org
        run: |
          export HOME=/root 
          echo "Running on Branch: ${{github.base_ref}}"
          if [ "${{github.base_ref}}" = "develop" ]; then
              echo "Authing into Develop Org"
              echo ${{ secrets.QA }} > token.txt   
          else
              echo "Unknown Branch, Exiting"
              exit 1       
          fi
          sf auth sfdxurl store -f token.txt -a myOrg -s
      # Delta Validation to target Org. If changes are related with Apex classes or flows then we execute test classes. Errors are inside the JSON node "result.details.componentFailures" for component failure
      # SPECIFIED_TESTS=$(ls force-app-delta/force-app/main/default/classes/*.cls | xargs grep -i '@istest' | cut -f1 -d':' | sort -u | sed 's/.cls//' | sed 's/.*\///' | tr '\n' ',' | sed 's/,$/\n/')
      # SPECIFIED_TESTS=$(find force-app-delta/force-app/main/default/classes/* -iname '*test.cls' -or -iname '*Test.cls' | sed 's/force-app-delta\/force-app\/main\/default\/classes\///' | tr '\n' ',' | sed 's/.$//' | sed 's/.cls//g')
      - name: Delta Validation to target Org. If changes are related with Apex classes or flows then we execute committed test classes. Errors are inside the JSON node "result.details.componentFailures" for component failure
        run: |
          export HOME=/root
          if [ $(cat force-app-delta/package/package.xml | wc -l) -gt 4 ];then
             NUMBER_OF_COMPONENTS=$(cat force-app-delta/package/package.xml | grep -o "<members" | wc -l)
            if [ $(egrep 'name>ApexClass|name>Apextrigger' force-app-delta/package/package.xml | wc -l) -lt 1 ];then
              echo "Validating Delta and not running Apex tests ($NUMBER_OF_COMPONENTS components)"
              sf project deploy start --ignore-warnings --manifest "./force-app-delta/package/package.xml" --test-level NoTestRun -w 100 --dry-run --target-org myOrg --json
            else 
              echo "Validating Delta and Runing only committed Tests Classes Classes ($NUMBER_OF_COMPONENTS components). The % of coverage is only applicable to Apex classes covered byh the test classes committed"
              SPECIFIED_TESTS=$(find force-app-delta/force-app/main/default/classes/* -iname '*test.cls' -or -iname '*Test.cls' | sed 's/force-app-delta\/force-app\/main\/default\/classes\///' | tr '\n' ' ' | sed 's/.$//' | sed 's/.cls//g')
              if [ -z "$SPECIFIED_TESTS" ]; then
                echo "You are committing Apex Classes or Triggers without including any test class. Please make sure you commit also the respective Test Classes"
                exit 1
              else
                echo "Executing the following Test Classes: $SPECIFIED_TESTS"
                sf project deploy start --ignore-warnings --manifest "./force-app-delta/package/package.xml" --test-level RunSpecifiedTests --tests $SPECIFIED_TESTS -w 100 --dry-run --target-org myOrg --json
              fi
            fi
            if [ $? -ne 0 ]; then
              echo "SF - deployment Failed"
              exit 1
            fi   
          else
            echo "No SF changes found. Deployment skipped"
          fi

      # Delta Validation to target Org
      - name: Delta Validation to target Org + Destructive changes without running test classes. If this tep FAILS job is still success
        continue-on-error: true
        run: |
          export HOME=/root
          if grep -q '<types>' ./force-app-delta/destructiveChanges/destructiveChanges.xml ; then
             echo "Removing the below components: \n `cat force-app-delta/destructiveChanges/destructiveChanges.xml`"
             sf project deploy start --ignore-warnings --manifest  "./force-app-delta/package/package.xml" --post-destructive-changes "./force-app-delta/destructiveChanges/destructiveChanges.xml" -l NoTestRun -w 100 --dry-run --target-org myOrg --json
          else
             echo "No destructive changes found"
          fi

  # This workflow contains a single job called "build"
  DATA_DELTA_VALIDATION:
    # The type of runner that the job will run on
    needs: [METADATA_DELTA_VALIDATION]
    runs-on: ubuntu-latest
    container:
      image: jorgesolebur/salesforce-ci:latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: "1"

      #Authentication to QA
      - name: Write the token into a file and authenticate to Target Org
        run: |
          export HOME=/root
          echo ${{ secrets.QA }} > token.txt         
          sf auth sfdxurl store -f token.txt -a myOrg -s

      #PRE Deployment Steps
      - name: PRE Deployment Step before simulating Data Import
        run: |
          export HOME=/root
          sf project deploy start -d ./deploymentSteps/preDataKpiDef/ -o myOrg

      #SFDMU RUN
      - name: Run Data Import SIMULATION. No data will be imported in target. This step will fail if there are missing dependencies
        run: |
          export HOME=/root
          echo 'n' | sf sfdmu run -s csvfile -u myOrg -p ./scripts/sfdmu/metaDevToRepo/ --simulation
          sleep 4
          if [ -s ./scripts/sfdmu/metaDevToRepo/CSVIssuesReport.csv ]; then
            echo "There are issues while executing the simulation. Check CSVIssuesReport.csv in the Artifacts section"
            exit 1
          fi
          if [ -s ./scripts/sfdmu/metaDevToRepo/MissingParentRecordsReport.csv ]; then
            echo "There are issues while executing the simulation. Check MissingParentRecordsReport.csv in the Artifacts section"
            exit 1
          fi

      #POST Deployment Steps
      - name: POST Deployment Step before simulating Data Import
        if:  success() || failure()
        run: |
          export HOME=/root
          sf project deploy start -d ./deploymentSteps/postDataKpiDef/ -o myOrg

      - name: Upload artifacts
        if:  success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: SFDMU Logs
          path: |
            ./scripts/sfdmu/metaDevToRepo/CSVIssuesReport.csv
            ./scripts/sfdmu/metaDevToRepo/MissingParentRecordsReport.csv
            ./scripts/sfdmu/metaDevToRepo/target/
          if-no-files-found: ignore
          retention-days: 3
          compression-level: 6
