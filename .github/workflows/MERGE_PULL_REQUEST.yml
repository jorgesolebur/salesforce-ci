# This is a basic workflow to help you get started with Actions

name: MERGE_PULL_REQUEST

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  pull_request:
    types: [closed]
    branches: [develop]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy_pull_request"
  DEPLOY_DELTA_PR:
    if: github.event.pull_request.merged == true
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: jorgesolebur/salesforce-ci:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: "2"

      # Run sf GIT and creates delta
      - name: Run sf git delta and creates delta
        run: |
          export HOME=/root
          mkdir force-app-delta
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          pwsh -c 'sf sgd source delta -s force-app -t "HEAD" -f "HEAD^" -s force-app --generate-delta --output ./force-app-delta/'
      - name: Show package to deploy
        run: |
          cat force-app-delta/package/package.xml
      - name: Show package to destroy
        run: |
          cat force-app-delta/destructiveChanges/destructiveChanges.xml

      # Replaces placeholders in the metadata with the value from the property file for the right environment
      - name: Replaces placeholder in the files with the property files from the right environment
        run: |
          export HOME=/root
          echo "Running on Branch: ${{github.base_ref}}"
          if [ "${{github.base_ref}}" = "develop" ]; then
              echo "Preparing QA Properties"
              ant prepare -Dsf.env=QA
          else
              echo "Unknown Branch, Exiting"
              exit 1 
          fi
          

      #Authentication to Target org
      - name: Write the token into a file and authenticate to Target Org
        run: |
          export HOME=/root
          echo "Running on Branch: ${{github.base_ref}}"
          if [ "${{github.base_ref}}" = "develop" ]; then
              echo "Authing into Develop Org"
              echo ${{ secrets.QA }} > token.txt      
          else
              echo "Unknown Branch, Exiting"
              exit 1 
          fi
          sf auth sfdxurl store -f token.txt -a myOrg -s

      # Delta Deployment to target Org only if there are changes to deploy. If changes are related with Apex classes or flows then we execute test classes
      - name: Delta Deployment to target Org only if there are changes to deploy. If changes are related with Apex classes or flows then we execute test classes
        id: delta-deployment
        run: |
          export HOME=/root
          if [ $(cat force-app-delta/package/package.xml | wc -l) -gt 4 ];then
             NUMBER_OF_COMPONENTS=$(cat force-app-delta/package/package.xml | grep -o "<members" | wc -l)
            if [ $(egrep 'name>ApexClass|name>Apextrigger' force-app-delta/package/package.xml | wc -l) -lt 1 ];then
              echo "Validating Delta and not running Apex tests ($NUMBER_OF_COMPONENTS components)"
              sf project deploy start --ignore-warnings --manifest "./force-app-delta/package/package.xml" -l NoTestRun -w 100 -o myOrg --json
            else 
              echo "Validating Delta and Runing only committed Tests Classes Classes ($NUMBER_OF_COMPONENTS components). The % of coverage is only applicable to Apex classes covered byh the test classes committed"
              SPECIFIED_TESTS=$(find force-app-delta/force-app/main/default/classes/* -iname '*test.cls' -or -iname '*Test.cls' | sed 's/force-app-delta\/force-app\/main\/default\/classes\///' | tr '\n' ' ' | sed 's/.$//' | sed 's/.cls//g')
              if [ -z "$SPECIFIED_TESTS" ]; then
                echo "You are committing Apex Classes or Triggers without including any test class. Please make sure you commit also the respective Test Classes"
                exit 1
              else
                echo "Executing the following Test Classes: $SPECIFIED_TESTS"
                sf project deploy start --ignore-warnings --manifest "./force-app-delta/package/package.xml" --test-level RunSpecifiedTests --tests $SPECIFIED_TESTS -w 100 -o myOrg --json
              fi
            fi
            if [ $? -ne 0 ]; then
              echo "SF - deployment Failed"
              exit 1
            fi   
          else
            echo "No SF changes found. Deployment skipped"
          fi

      # Delta Destruction to target Org
      - name: Delta Destruction to target Org if there are changes to destroy. If this step fails we need to manually delete the failed components. Errors are inside the JSON node "result.details.componentFailures" for component failure
        continue-on-error: true
        run: |
          export HOME=/root
          if grep -q '<types>' ./force-app-delta/destructiveChanges/destructiveChanges.xml ; then
             echo "Removing the below components: \n `cat force-app-delta/destructiveChanges/destructiveChanges.xml`"
             sf project deploy start --ignore-warnings --manifest force-app-delta/destructiveChanges/package.xml --post-destructive-changes force-app-delta/destructiveChanges/destructiveChanges.xml -w 100 -l NoTestRun -o myOrg --json
          else
             echo "No destructive changes found. Destruction step skipped"
          fi
